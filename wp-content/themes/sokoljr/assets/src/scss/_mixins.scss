/**
 *  Clearfix
 *
 *  Usage: append to container, that contains floated elements - @include clearfix;
 */
@mixin clearfix {
    &:after {
        content: "";
        display: block;
        clear: both;
        width: 100%;
        height: 0;
    }
}


/**
 *  «Respond to» mixin
 *
 *  Mixin to manage responsive breakpoints
 *  @param {String} $breakpoint - Breakpoint name
 *  @author Hugo Giraudel
 *
 *  @require $breakpoints
 */
$breakpoints: (
    'laptop': 1399px,
    'tablet': 1199px,
    'phone':  767px,
);
@mixin respond-to( $breakpoint ) {
    @if map-has-key( $breakpoints, $breakpoint ) {
        @media ( max-width: map-get( $breakpoints, $breakpoint ) ) {
            @content;
        }
    }
    
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys( $breakpoints )}.";
    }
}

@mixin media($size) {
  @media (max-width: $size) {
    @content;
  }
}

/**
Placeholder
 */
@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

// display flex (flex-direction, justify-content, align-items)
@mixin flex($direction: row, $content: center, $items: center) {
  display: flex;
  align-items: $items;
  justify-content: $content;
  flex-direction: $direction;
}
